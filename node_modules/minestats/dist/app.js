"use strict";
/**
 * @file app.ts
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkinRendered = exports.AvatarRendered = exports.HeadAvatar = exports.ServerStats = exports.UUIDToUsername = exports.UsernameToUUID = void 0;
// Library
const node_fetch_1 = __importDefault(require("node-fetch"));
let red = '\x1b[31m';
let reset = '\x1b[0m';
// Functions
async function UsernameToUUID(username) {
    return new Promise((resolve, reject) => {
        node_fetch_1.default(`https://api.mojang.com/users/profiles/minecraft/${username}`)
            .then(res => res.json())
            .then(json => resolve(json))
            .catch(() => reject(`${red}MineStats Error: ${reset}Username has not been found!`));
    });
}
exports.UsernameToUUID = UsernameToUUID;
async function UUIDToUsername(uuid) {
    return new Promise((resolve, reject) => {
        node_fetch_1.default(`https://api.mojang.com/user/profiles/${uuid}/names`)
            .then(res => res.json())
            .then(json => resolve(json.pop()))
            .catch(() => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}
exports.UUIDToUsername = UUIDToUsername;
async function ServerStats(serverIP) {
    return new Promise((resolve, reject) => {
        node_fetch_1.default(`https://mcapi.us/server/status?ip=${serverIP.split(':')[0]}&port=${serverIP.split(':')[1]}`)
            .then(res => res.json())
            .then(json => {
            if (json.status === 'error')
                reject(`${red}MineStats Error: ${reset}Server has not been found!`);
            resolve(json);
        })
            .catch(() => reject(`${red}MineStats Error: ${reset}Server has not been found!`));
    });
}
exports.ServerStats = ServerStats;
async function HeadAvatar(uuid) {
    return new Promise((resolve, reject) => {
        node_fetch_1.default(`https://crafatar.com/avatars/${uuid}`)
            .then(res => {
            if (res.status !== 200)
                reject(`${red}MineStats Error: ${reset}UUID has not been found!`);
        })
            .catch(() => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}
exports.HeadAvatar = HeadAvatar;
async function AvatarRendered(uuid) {
    return new Promise((resolve, reject) => {
        node_fetch_1.default(`https://crafatar.com/renders/head/${uuid}`)
            .then(res => {
            if (res.status !== 200)
                reject(`${red}MineStats Error: ${reset}UUID has not been found!`);
            resolve(res.url);
        })
            .catch(() => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}
exports.AvatarRendered = AvatarRendered;
async function SkinRendered(uuid) {
    return new Promise((resolve, reject) => {
        node_fetch_1.default(`https://crafatar.com/renders/body/${uuid}`)
            .then(res => {
            if (res.status !== 200)
                reject(`${red}MineStats Error: ${reset}UUID has not been found!`);
            resolve(res.url);
        })
            .catch(() => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}
exports.SkinRendered = SkinRendered;
