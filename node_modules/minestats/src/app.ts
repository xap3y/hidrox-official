/**
 * @file app.ts
 */

// Library
import fetch from 'node-fetch';

let red: string = '\x1b[31m';
let reset: string = '\x1b[0m';

// Functions
export async function UsernameToUUID(username: string) {
    return new Promise((resolve, reject) => {
        fetch(`https://api.mojang.com/users/profiles/minecraft/${username}`)
            .then(res => res.json())
            .then(json => resolve(json))
            .catch((): void => reject(`${red}MineStats Error: ${reset}Username has not been found!`));
    });
}

export async function UUIDToUsername(uuid: string) {
    return new Promise((resolve, reject) => {
        fetch(`https://api.mojang.com/user/profiles/${uuid}/names`)
            .then(res => res.json())
            .then(json => resolve(json.pop()))
            .catch((): void => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}

export async function ServerStats(serverIP: string) {
    return new Promise((resolve, reject) => {
        fetch(`https://mcapi.us/server/status?ip=${serverIP.split(':')[0]}&port=${serverIP.split(':')[1]}`)
            .then(res => res.json())
            .then(json => {
                if (json.status === 'error') reject(`${red}MineStats Error: ${reset}Server has not been found!`);
                resolve(json);  
            })
            .catch((): void => reject(`${red}MineStats Error: ${reset}Server has not been found!`));
    });
}

export async function HeadAvatar(uuid: string) {
    return new Promise((resolve, reject) => {
        fetch(`https://crafatar.com/avatars/${uuid}`)
            .then(res => {
                if (res.status !== 200) reject(`${red}MineStats Error: ${reset}UUID has not been found!`);
            })
            .catch((): void => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}

export async function AvatarRendered(uuid: string) {
    return new Promise((resolve, reject) => {
        fetch(`https://crafatar.com/renders/head/${uuid}`)
            .then(res => {
                if (res.status !== 200) reject(`${red}MineStats Error: ${reset}UUID has not been found!`);
                resolve(res.url);
            })
            .catch((): void => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}

export async function SkinRendered(uuid: string) {
    return new Promise((resolve, reject) => {
        fetch(`https://crafatar.com/renders/body/${uuid}`)
            .then(res => {
                if (res.status !== 200) reject(`${red}MineStats Error: ${reset}UUID has not been found!`);
                resolve(res.url);
            })
            .catch((): void => reject(`${red}MineStats Error: ${reset}UUID has not been found!`));
    });
}